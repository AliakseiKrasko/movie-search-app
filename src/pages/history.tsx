import { useSelector, useDispatch } from 'react-redux';
import { useState } from 'react';
import Head from 'next/head';
import Layout from '../components/Layout/Layout';
import MovieCard from '../components/MovieCard/MovieCard';
import { RootState } from '@/store';
import { clearHistory, removeFromHistory } from '@/store/slices/searchSlice';
import { addToFavorites, removeFromFavorites } from '@/store/slices/favoritesSlice';
import { Movie } from '@/types/movie';
import styles from './History.module.scss';

// –û–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏
interface HistoryItem {
    movie: Movie;
    viewedAt: string;
}

export default function History() {
    const dispatch = useDispatch();
    const history = useSelector((state: RootState) => state.search.history) as HistoryItem[];
    const favorites = useSelector((state: RootState) => state.favorites.items) as Movie[];
    const [timeFilter, setTimeFilter] = useState<'all' | 'today' | 'week' | 'month'>('all');
    const [sortBy, setSortBy] = useState<'recent' | 'title' | 'rating'>('recent');

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const filteredHistory = history.filter((item: HistoryItem) => {
        if (timeFilter === 'all') return true;

        const now = new Date();
        const itemDate = new Date(item.viewedAt);

        switch (timeFilter) {
            case 'today':
                return itemDate.toDateString() === now.toDateString();
            case 'week': {
                const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                return itemDate >= weekAgo;
            }
            case 'month': {
                const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                return itemDate >= monthAgo;
            }
            default:
                return true;
        }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
    const sortedHistory = [...filteredHistory].sort((a: HistoryItem, b: HistoryItem) => {
        switch (sortBy) {
            case 'title':
                return a.movie.title.localeCompare(b.movie.title);
            case 'rating':
                return b.movie.vote_average - a.movie.vote_average;
            case 'recent':
            default:
                return new Date(b.viewedAt).getTime() - new Date(a.viewedAt).getTime();
        }
    });

    const handleToggleFavorite = (movie: Movie) => {
        const isFavorite = favorites.some((fav: Movie) => fav.id === movie.id);

        if (isFavorite) {
            dispatch(removeFromFavorites(movie.id));
        } else {
            dispatch(addToFavorites(movie));
        }
    };

    const handleRemoveFromHistory = (movieId: number) => {
        dispatch(removeFromHistory(movieId));
    };

    const handleClearHistory = () => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤?')) {
            dispatch(clearHistory());
        }
    };

    const formatDate = (dateString: string) => {
        const date = new Date(dateString);
        const now = new Date();
        const diffTime = Math.abs(now.getTime() - date.getTime());
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        if (diffDays === 1) {
            return `–°–µ–≥–æ–¥–Ω—è –≤ ${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
        } else if (diffDays === 2) {
            return `–í—á–µ—Ä–∞ –≤ ${date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
        } else if (diffDays <= 7) {
            return `${diffDays - 1} –¥–Ω. –Ω–∞–∑–∞–¥`;
        } else {
            return date.toLocaleDateString('ru-RU');
        }
    };

    return (
        <Layout>
            <Head>
                <title>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - Movie App</title>
                <meta name="description" content="–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤" />
            </Head>

            <div className={styles.container}>
                <div className={styles.header}>
                    <h1>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</h1>
                    <div className={styles.stats}>
                        {history.length > 0 ? (
                            <span>–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {history.length} {history.length === 1 ? '—Ñ–∏–ª—å–º' : '—Ñ–∏–ª—å–º–æ–≤'}</span>
                        ) : (
                            <span>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</span>
                        )}
                    </div>
                </div>

                {history.length > 0 && (
                    <div className={styles.controls}>
                        <div className={styles.filters}>
                            <div className={styles.filterGroup}>
                                <label htmlFor="time-filter">–ü–µ—Ä–∏–æ–¥:</label>
                                <select
                                    id="time-filter"
                                    value={timeFilter}
                                    onChange={(e) => setTimeFilter(e.target.value as typeof timeFilter)}
                                    className={styles.select}
                                >
                                    <option value="all">–í—Å–µ –≤—Ä–µ–º—è</option>
                                    <option value="today">–°–µ–≥–æ–¥–Ω—è</option>
                                    <option value="week">–ù–µ–¥–µ–ª—è</option>
                                    <option value="month">–ú–µ—Å—è—Ü</option>
                                </select>
                            </div>

                            <div className={styles.filterGroup}>
                                <label htmlFor="sort-by">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
                                <select
                                    id="sort-by"
                                    value={sortBy}
                                    onChange={(e) => setSortBy(e.target.value as typeof sortBy)}
                                    className={styles.select}
                                >
                                    <option value="recent">–ü–æ –¥–∞—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</option>
                                    <option value="title">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
                                    <option value="rating">–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É</option>
                                </select>
                            </div>
                        </div>

                        <button
                            onClick={handleClearHistory}
                            className={styles.clearButton}
                        >
                            –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
                        </button>
                    </div>
                )}

                {history.length === 0 ? (
                    <div className={styles.empty}>
                        <div className={styles.emptyIcon}>üì∫</div>
                        <h2>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø—É—Å—Ç–∞</h2>
                        <p>
                            –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏.
                            –ò—Å—Ç–æ—Ä–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–∞.
                        </p>
                    </div>
                ) : filteredHistory.length === 0 ? (
                    <div className={styles.noResults}>
                        <h3>–ù–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</h3>
                        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥</p>
                    </div>
                ) : (
                    <div className={styles.historyList}>
                        {sortedHistory.map((item: HistoryItem) => {
                            const isFavorite = favorites.some((fav: Movie) => fav.id === item.movie.id);

                            return (
                                <div key={`${item.movie.id}-${item.viewedAt}`} className={styles.historyItem}>
                                    <div className={styles.movieCardWrapper}>
                                        <MovieCard
                                            movie={item.movie}
                                            onToggleFavorite={() => handleToggleFavorite(item.movie)}
                                            isFavorite={isFavorite}
                                        />
                                    </div>

                                    <div className={styles.historyInfo}>
                                        <div className={styles.viewedAt}>
                                            –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: {formatDate(item.viewedAt)}
                                        </div>

                                        <button
                                            onClick={() => handleRemoveFromHistory(item.movie.id)}
                                            className={styles.removeButton}
                                            title="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"
                                        >
                                            ‚úï
                                        </button>
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                )}

                {filteredHistory.length > 0 && (
                    <div className={styles.summary}>
                        <p>
                            –ü–æ–∫–∞–∑–∞–Ω–æ {filteredHistory.length} –∏–∑ {history.length} –∑–∞–ø–∏—Å–µ–π
                        </p>
                    </div>
                )}
            </div>
        </Layout>
    );
}